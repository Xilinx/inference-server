
.. _program_listing_file_src_amdinfer_servers_http_server.hpp:

Program Listing for File http_server.hpp
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_amdinfer_servers_http_server.hpp>` (``src/amdinfer/servers/http_server.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright 2021 Xilinx, Inc.
   // Copyright 2022 Advanced Micro Devices, Inc.
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //      http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #ifndef GUARD_AMDINFER_SERVERS_HTTP_SERVER
   #define GUARD_AMDINFER_SERVERS_HTTP_SERVER
   
   #include <functional>  // for function
   #include <string>      // for allocator, string
   
   #include "amdinfer/build_options.hpp"  // for AMDINFER_ENABLE_HTTP, PROT...
   #include "amdinfer/observation/logging.hpp"  // for LoggerPtr
   
   #ifdef AMDINFER_ENABLE_HTTP
   #include <drogon/HttpController.h>  // for ADD_METHOD_TO, HttpContro...
   #include <drogon/HttpRequest.h>     // for HttpRequestPtr
   #include <drogon/HttpResponse.h>    // for HttpResponsePtr
   #include <drogon/HttpTypes.h>       // for Options, Get, Post
   #endif
   
   namespace amdinfer::http {
   
   #ifdef AMDINFER_ENABLE_HTTP
   
   namespace v2 {
   
   class AmdinferHttpServer
     : public drogon::HttpController<AmdinferHttpServer, false> {
    public:
     explicit AmdinferHttpServer();
   
     METHOD_LIST_BEGIN
   #ifdef AMDINFER_ENABLE_REST
     ADD_METHOD_TO(AmdinferHttpServer::getServerLive, "v2/health/live",
                   drogon::Get, drogon::Options);
     ADD_METHOD_TO(AmdinferHttpServer::getServerReady, "v2/health/ready",
                   drogon::Get, drogon::Options);
     ADD_METHOD_TO(AmdinferHttpServer::getModelReady, "v2/models/{model}/ready",
                   drogon::Get, drogon::Options);
     ADD_METHOD_TO(AmdinferHttpServer::getServerMetadata, "v2", drogon::Get,
                   drogon::Options);
     ADD_METHOD_TO(AmdinferHttpServer::getModelMetadata, "v2/models/{model}",
                   drogon::Get, drogon::Options);
     ADD_METHOD_TO(AmdinferHttpServer::hasHardware, "v2/hardware", drogon::Post,
                   drogon::Options);
     ADD_METHOD_TO(AmdinferHttpServer::modelList, "v2/models", drogon::Get,
                   drogon::Options);
     ADD_METHOD_TO(AmdinferHttpServer::modelInfer, "v2/models/{model}/infer",
                   drogon::Post, drogon::Options);
     ADD_METHOD_TO(AmdinferHttpServer::modelLoad,
                   "v2/repository/models/{model}/load", drogon::Post,
                   drogon::Options);
     ADD_METHOD_TO(AmdinferHttpServer::modelUnload,
                   "v2/repository/models/{model}/unload", drogon::Post,
                   drogon::Options);
     ADD_METHOD_TO(AmdinferHttpServer::workerLoad, "v2/workers/{worker}/load",
                   drogon::Post, drogon::Options);
     ADD_METHOD_TO(AmdinferHttpServer::workerUnload, "v2/workers/{worker}/unload",
                   drogon::Post, drogon::Options);
   #endif
   #ifdef AMDINFER_ENABLE_METRICS
     ADD_METHOD_TO(AmdinferHttpServer::metrics, "metrics", drogon::Get);
   #endif
     METHOD_LIST_END
   
   #ifdef AMDINFER_ENABLE_REST
   
     void getServerLive(
       const drogon::HttpRequestPtr &req,
       std::function<void(const drogon::HttpResponsePtr &)> &&callback) const;
   
     void getServerReady(
       const drogon::HttpRequestPtr &req,
       std::function<void(const drogon::HttpResponsePtr &)> &&callback) const;
   
     void getModelReady(
       const drogon::HttpRequestPtr &req,
       std::function<void(const drogon::HttpResponsePtr &)> &&callback,
       std::string const &model) const;
   
     void getServerMetadata(
       const drogon::HttpRequestPtr &req,
       std::function<void(const drogon::HttpResponsePtr &)> &&callback) const;
   
     void getModelMetadata(
       const drogon::HttpRequestPtr &req,
       std::function<void(const drogon::HttpResponsePtr &)> &&callback,
       std::string const &model) const;
   
     void hasHardware(
       const drogon::HttpRequestPtr &req,
       std::function<void(const drogon::HttpResponsePtr &)> &&callback) const;
   
     void modelList(
       const drogon::HttpRequestPtr &req,
       std::function<void(const drogon::HttpResponsePtr &)> &&callback) const;
   
     void modelInfer(
       const drogon::HttpRequestPtr &req,
       std::function<void(const drogon::HttpResponsePtr &)> &&callback,
       std::string const &model) const;
   
     void modelLoad(
       const drogon::HttpRequestPtr &req,
       std::function<void(const drogon::HttpResponsePtr &)> &&callback,
       std::string const &model) const;
   
     void modelUnload(
       const drogon::HttpRequestPtr &req,
       std::function<void(const drogon::HttpResponsePtr &)> &&callback,
       std::string const &model) const;
   
     void workerLoad(
       const drogon::HttpRequestPtr &req,
       std::function<void(const drogon::HttpResponsePtr &)> &&callback,
       std::string const &worker) const;
   
     void workerUnload(
       const drogon::HttpRequestPtr &req,
       std::function<void(const drogon::HttpResponsePtr &)> &&callback,
       std::string const &worker) const;
   #endif
   
   #ifdef AMDINFER_ENABLE_METRICS
   
     void metrics(
       const drogon::HttpRequestPtr &req,
       std::function<void(const drogon::HttpResponsePtr &)> &&callback) const;
   #endif
   #ifdef AMDINFER_ENABLE_LOGGING
    private:
     Logger logger_{Loggers::kServer};
   #endif
   };
   
   }  // namespace v2
   
   #endif
   
   void start(int port);
   
   void stop();
   
   }  // namespace amdinfer::http
   #endif  // GUARD_AMDINFER_SERVERS_HTTP_SERVER
