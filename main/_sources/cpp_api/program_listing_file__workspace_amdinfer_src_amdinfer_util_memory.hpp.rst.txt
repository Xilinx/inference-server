
.. _program_listing_file__workspace_amdinfer_src_amdinfer_util_memory.hpp:

Program Listing for File memory.hpp
===================================

|exhale_lsh| :ref:`Return to documentation for file <file__workspace_amdinfer_src_amdinfer_util_memory.hpp>` (``/workspace/amdinfer/src/amdinfer/util/memory.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright 2023 Advanced Micro Devices, Inc.
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //      http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #ifndef GUARD_AMDINFER_UTIL_MEMORY
   #define GUARD_AMDINFER_UTIL_MEMORY
   
   #include <cassert>  // for assert
   #include <cstddef>  // for byte
   #include <cstring>  // for memcpy
   
   namespace amdinfer::util {
   
   template <typename T>
   std::byte *copy(const T &src, std::byte *dst,
                   [[maybe_unused]] size_t count = 0) {
     if constexpr (std::is_pointer_v<T>) {
       assert(count > 0);
       std::memcpy(dst, src, count);
       return dst + count;
     }
     if (count == 0) {
       count = sizeof(T);
     }
     std::memcpy(dst, &src, count);
     return dst + count;
   }
   
   }  // namespace amdinfer::util
   
   #endif  // GUARD_AMDINFER_UTIL_MEMORY
