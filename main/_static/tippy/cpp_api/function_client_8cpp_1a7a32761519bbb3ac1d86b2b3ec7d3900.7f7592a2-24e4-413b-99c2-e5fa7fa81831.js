selector_to_html = {"a[href=\"classamdinfer_1_1ParameterMap.html#_CPPv4N8amdinfer12ParameterMapE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12ParameterMapE\">\n<span id=\"_CPPv3N8amdinfer12ParameterMapE\"></span><span id=\"_CPPv2N8amdinfer12ParameterMapE\"></span><span id=\"amdinfer::ParameterMap\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ParameterMap</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../cpp_user_api.html#_CPPv48amdinfer\" title=\"amdinfer\"><span class=\"n\"><span class=\"pre\">amdinfer</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"classamdinfer_1_1Serializable.html#_CPPv4N8amdinfer12SerializableE\" title=\"amdinfer::Serializable\"><span class=\"n\"><span class=\"pre\">Serializable</span></span></a><br/></dt><dd><p>Holds any parameters from JSON (defined by KServe spec as one of bool, number or string). We further restrict numbers to be doubles or int32. </p></dd>", "a[href=\"#function-documentation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Function Documentation<a class=\"headerlink\" href=\"#function-documentation\" title=\"Permalink to this heading\">\u00b6</a></h2>", "a[href=\"#_CPPv4N8amdinfer12loadEnsembleEPK6ClientNSt6vectorINSt6stringEEENSt6vectorI12ParameterMapEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12loadEnsembleEPK6ClientNSt6vectorINSt6stringEEENSt6vectorI12ParameterMapEE\">\n<span id=\"_CPPv3N8amdinfer12loadEnsembleEPK6ClientNSt6vectorINSt6stringEEENSt6vectorI12ParameterMapEE\"></span><span id=\"_CPPv2N8amdinfer12loadEnsembleEPK6ClientNSt6vectorINSt6stringEEENSt6vectorI12ParameterMapEE\"></span><span id=\"amdinfer::loadEnsemble__ClientCP.std::vector:ss:.std::vector:ParameterMap:\"></span><span class=\"target\" id=\"client_8cpp_1a7a32761519bbb3ac1d86b2b3ec7d3900\"></span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">vector</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-prename descclassname\"><a class=\"reference internal\" href=\"../cpp_user_api.html#_CPPv48amdinfer\" title=\"amdinfer\"><span class=\"n\"><span class=\"pre\">amdinfer</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">loadEnsemble</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"classamdinfer_1_1Client.html#_CPPv4N8amdinfer6ClientE\" title=\"amdinfer::Client\"><span class=\"n\"><span class=\"pre\">Client</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"n sig-param\"><span class=\"pre\">client</span></span>, <span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">vector</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">workers</span></span>, <span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">vector</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"classamdinfer_1_1ParameterMap.html#_CPPv4N8amdinfer12ParameterMapE\" title=\"amdinfer::ParameterMap\"><span class=\"n\"><span class=\"pre\">ParameterMap</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">parameters</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Load an ensemble - a chain of connected workers. This implementation uses the simplest case where the ensemble is a single linear graph. </p></dd>", "a[href=\"#function-amdinfer-loadensemble\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Function amdinfer::loadEnsemble<a class=\"headerlink\" href=\"#function-amdinfer-loadensemble\" title=\"Permalink to this heading\">\u00b6</a></h1><h2>Function Documentation<a class=\"headerlink\" href=\"#function-documentation\" title=\"Permalink to this heading\">\u00b6</a></h2>", "a[href=\"../cpp_user_api.html#_CPPv48amdinfer\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48amdinfer\">\n<span id=\"_CPPv38amdinfer\"></span><span id=\"_CPPv28amdinfer\"></span><span id=\"amdinfer\"></span><span class=\"target\" id=\"namespaceamdinfer\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">amdinfer</span></span></span><br/></dt><dd></dd>", "a[href=\"classamdinfer_1_1Client.html#_CPPv4N8amdinfer6ClientE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer6ClientE\">\n<span id=\"_CPPv3N8amdinfer6ClientE\"></span><span id=\"_CPPv2N8amdinfer6ClientE\"></span><span id=\"amdinfer::Client\"></span><span class=\"target\" id=\"classamdinfer_1_1Client\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Client</span></span></span><br/></dt><dd><p>The base <a class=\"reference internal\" href=\"#classamdinfer_1_1Client\"><span class=\"std std-ref\">Client</span></a> class defines the set of methods that all client implementations must provide. These methods are based on the API defined by KServe, with some extensions. This is a pure virtual class. </p><p>Subclassed by <a class=\"reference internal\" href=\"../cpp_user_api.html#classamdinfer_1_1GrpcClient\"><span class=\"std std-ref\">amdinfer::GrpcClient</span></a>, <a class=\"reference internal\" href=\"../cpp_user_api.html#classamdinfer_1_1HttpClient\"><span class=\"std std-ref\">amdinfer::HttpClient</span></a>, <a class=\"reference internal\" href=\"../cpp_user_api.html#classamdinfer_1_1NativeClient\"><span class=\"std std-ref\">amdinfer::NativeClient</span></a>, <a class=\"reference internal\" href=\"../cpp_user_api.html#classamdinfer_1_1WebSocketClient\"><span class=\"std std-ref\">amdinfer::WebSocketClient</span></a></p></dd>", "a[href=\"file__workspace_amdinfer_src_amdinfer_clients_client.cpp.html#file-workspace-amdinfer-src-amdinfer-clients-client-cpp\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">File client.cpp<a class=\"headerlink\" href=\"#file-client-cpp\" title=\"Permalink to this heading\">\u00b6</a></h1><p>\u21b0 <a class=\"reference internal\" href=\"dir__workspace_amdinfer_src_amdinfer_clients.html#dir-workspace-amdinfer-src-amdinfer-clients\"><span class=\"std std-ref\">Parent directory</span></a> (<code class=\"docutils literal notranslate\"><span class=\"pre\">/workspace/amdinfer/src/amdinfer/clients</span></code>)</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
