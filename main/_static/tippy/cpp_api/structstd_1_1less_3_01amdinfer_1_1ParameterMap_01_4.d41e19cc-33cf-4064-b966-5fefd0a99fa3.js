selector_to_html = {"a[href=\"classamdinfer_1_1ParameterMap.html#_CPPv4N8amdinfer12ParameterMapE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12ParameterMapE\">\n<span id=\"_CPPv3N8amdinfer12ParameterMapE\"></span><span id=\"_CPPv2N8amdinfer12ParameterMapE\"></span><span id=\"amdinfer::ParameterMap\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ParameterMap</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../cpp_user_api.html#_CPPv48amdinfer\" title=\"amdinfer\"><span class=\"n\"><span class=\"pre\">amdinfer</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"classamdinfer_1_1Serializable.html#_CPPv4N8amdinfer12SerializableE\" title=\"amdinfer::Serializable\"><span class=\"n\"><span class=\"pre\">Serializable</span></span></a><br/></dt><dd><p>Holds any parameters from JSON (defined by KServe spec as one of bool, number or string). We further restrict numbers to be doubles or int32. </p></dd>", "a[href=\"#struct-documentation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Struct Documentation<a class=\"headerlink\" href=\"#struct-documentation\" title=\"Permalink to this heading\">\u00b6</a></h2>", "a[href=\"#_CPPv4IENSt4lessIN8amdinfer12ParameterMapEEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4IENSt4lessIN8amdinfer12ParameterMapEEE\">\n<span id=\"_CPPv3IENSt4lessIN8amdinfer12ParameterMapEEE\"></span><span id=\"_CPPv2IENSt4lessIN8amdinfer12ParameterMapEEE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"structstd_1_1less_3_01amdinfer_1_1ParameterMap_01_4\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">less</span></span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../cpp_user_api.html#_CPPv48amdinfer\" title=\"amdinfer\"><span class=\"n\"><span class=\"pre\">amdinfer</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"classamdinfer_1_1ParameterMap.html#_CPPv4N8amdinfer12ParameterMapE\" title=\"amdinfer::ParameterMap\"><span class=\"n\"><span class=\"pre\">ParameterMap</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd><p>Overload the \u201cless than\u201d operator so we can compare two RequestParameter objects. We need this functionality to store objects of this class in a map. Note, since hashing is not implemented, these objects cannot be stored in an unordered_map. </p></dd>", "a[href=\"../cpp_user_api.html#_CPPv48amdinfer\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48amdinfer\">\n<span id=\"_CPPv38amdinfer\"></span><span id=\"_CPPv28amdinfer\"></span><span id=\"amdinfer\"></span><span class=\"target\" id=\"namespaceamdinfer\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">amdinfer</span></span></span><br/></dt><dd></dd>", "a[href=\"file__workspace_amdinfer_include_amdinfer_core_parameters.hpp.html#file-workspace-amdinfer-include-amdinfer-core-parameters-hpp\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">File parameters.hpp<a class=\"headerlink\" href=\"#file-parameters-hpp\" title=\"Permalink to this heading\">\u00b6</a></h1><p>\u21b0 <a class=\"reference internal\" href=\"dir__workspace_amdinfer_include_amdinfer_core.html#dir-workspace-amdinfer-include-amdinfer-core\"><span class=\"std std-ref\">Parent directory</span></a> (<code class=\"docutils literal notranslate\"><span class=\"pre\">/workspace/amdinfer/include/amdinfer/core</span></code>)</p><p>Defines the Parameter object and associated containers.</p>", "a[href=\"#_CPPv4NKSt4lessIN8amdinfer12ParameterMapEEclERKN8amdinfer12ParameterMapERKN8amdinfer12ParameterMapE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NKSt4lessIN8amdinfer12ParameterMapEEclERKN8amdinfer12ParameterMapERKN8amdinfer12ParameterMapE\">\n<span id=\"_CPPv3NKSt4lessIN8amdinfer12ParameterMapEEclERKN8amdinfer12ParameterMapERKN8amdinfer12ParameterMapE\"></span><span id=\"_CPPv2NKSt4lessIN8amdinfer12ParameterMapEEclERKN8amdinfer12ParameterMapERKN8amdinfer12ParameterMapE\"></span><span id=\"std::less:amdinfer::ParameterMap:::call-operator__amdinfer::ParameterMapCR.amdinfer::ParameterMapCRC\"></span><span class=\"target\" id=\"structstd_1_1less_3_01amdinfer_1_1ParameterMap_01_4_1a1acb5bcc4230c4f2f485a70fb8f4ed0d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">()</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../cpp_user_api.html#_CPPv48amdinfer\" title=\"amdinfer\"><span class=\"n\"><span class=\"pre\">amdinfer</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"classamdinfer_1_1ParameterMap.html#_CPPv4N8amdinfer12ParameterMapE\" title=\"amdinfer::ParameterMap\"><span class=\"n\"><span class=\"pre\">ParameterMap</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">lhs</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../cpp_user_api.html#_CPPv48amdinfer\" title=\"amdinfer\"><span class=\"n\"><span class=\"pre\">amdinfer</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"classamdinfer_1_1ParameterMap.html#_CPPv4N8amdinfer12ParameterMapE\" title=\"amdinfer::ParameterMap\"><span class=\"n\"><span class=\"pre\">ParameterMap</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">rhs</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Implementation of the comparison of two RequestParameter objects. We compare the size and then check each key is present and finally, compare the key values. The types supported in ParameterMap all support direct comparison with the \u201cless than\u201d operator already. </p></dd>", "a[href=\"#template-struct-less-amdinfer-parametermap\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Template Struct less&lt; amdinfer::ParameterMap &gt;<a class=\"headerlink\" href=\"#template-struct-less-amdinfer-parametermap\" title=\"Permalink to this heading\">\u00b6</a></h1><h2>Struct Documentation<a class=\"headerlink\" href=\"#struct-documentation\" title=\"Permalink to this heading\">\u00b6</a></h2>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
