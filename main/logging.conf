<p>Logs collected by Xilinx Inference Server are placed in <code>~/.proteus/logs/</code> by default.</p>
<h2>Xilinx Inference Server Logs</h2>
<p>Logging in Xilinx Inference Server is configured in <code>proteus/observation/logging.*</code>. There are multiple knobs that can be tweaked to affect how and which log messages are captured.</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">cpp</ac:parameter>
<ac:parameter ac:name="linenumbers">false</ac:parameter>
<ac:plain-text-body><![CDATA[// in logging.hpp
#define SPDLOG_ACTIVE_LEVEL XXX

/*
Logging must be globally configured by setting SPDLOG_ACTIVE_LEVEL to one of:
- SPDLOG_LEVEL_TRACE
- SPDLOG_LEVEL_DEBUG
- SPDLOG_LEVEL_INFO
- SPDLOG_LEVEL_WARN
- SPDLOG_LEVEL_ERROR
- SPDLOG_LEVEL_CRITICAL
- SPDLOG_LEVEL_OFF

This setting configures at compile-time the minimum logging level that's allowed.
Setting this to OFF removes all logging statements.
*/

// in logging.cpp
sink->set_level(...)
logger->set_level(...)
logger->flush_on(...)

/*
Different kinds of sinks (e.g. file, console) and loggers can have individual
run-time minimum log level settings which must be one of:
- spdlog::level::trace
- spdlog::level::debug
- spdlog::level::info
- spdlog::level::warn
- spdlog::level::error
- spdlog::level::critical
- spdlog::level::off
*/]]></ac:plain-text-body>
</ac:structured-macro>
<h2>Drogon Logs</h2>
<p>Logging in Drogon is configured in <em>proteus/servers/http_server.cpp</em> by setting the appropriate log level when initializing the Drogon app.</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">cpp</ac:parameter>
<ac:parameter ac:name="linenumbers">false</ac:parameter>
<ac:plain-text-body><![CDATA[// in http_server.cpp
drogon::app()
...
.setLogLevel(XXX)
...

/*
The log level must be one of:
- trantor::Logger::kTrace
- trantor::Logger::kDebug
- trantor::Logger::kInfo
- trantor::Logger::kWarn
- trantor::Logger::kError
- trantor::Logger::kFatal
*/]]></ac:plain-text-body>
</ac:structured-macro>
