<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.BadResponseError</ac:parameter>
</ac:structured-macro>
<em>exception </em><code>proteus.</code><strong><code>BadResponseError</code></strong></dt>
<dd></dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.ConnectionError</ac:parameter>
</ac:structured-macro>
<em>exception </em><code>proteus.</code><strong><code>ConnectionError</code></strong></dt>
<dd></dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.Datatype</ac:parameter>
</ac:structured-macro>
<em>class </em><code>proteus.</code><strong><code>Datatype</code></strong>(<em><em>value</em></em>)</dt>
<dd><p>An enumeration.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.InvalidArgument</ac:parameter>
</ac:structured-macro>
<em>exception </em><code>proteus.</code><strong><code>InvalidArgument</code></strong></dt>
<dd></dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.ProteusError</ac:parameter>
</ac:structured-macro>
<em>exception </em><code>proteus.</code><strong><code>ProteusError</code></strong></dt>
<dd></dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.RestClient</ac:parameter>
</ac:structured-macro>
<code>proteus.</code><strong><code>RestClient</code></strong></dt>
<dd><p>alias of <ac:link ac:anchor="proteus.rest.Client">
<ac:link-body><code>proteus.rest.Client</code></ac:link-body>
</ac:link></p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.Server</ac:parameter>
</ac:structured-macro>
<em>class </em><code>proteus.</code><strong><code>Server</code></strong>(<em><em>executable</em>: <em>Optional[str]</em> = None</em>, <em><em>http_port</em>: <em>int</em> = 8998</em>)</dt>
<dd><p>The Server class provides methods to control the Proteus server.</p>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.Server.start</ac:parameter>
</ac:structured-macro>
<strong><code>start</code></strong>(<em><em>quiet</em>=False</em>)</dt>
<dd><p>Start the proteus server</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>quiet</strong> (<em>bool</em><em>, </em><em>optional</em>) – Suppress all output if True. Defaults to False.</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.Server.stop</ac:parameter>
</ac:structured-macro>
<strong><code>stop</code></strong>(<em><em>kill</em>=False</em>)</dt>
<dd><p>Stop the proteus server</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>kill</strong> (<em>bool</em><em>, </em><em>optional</em>) – Use signal 9 to kill. Defaults to False.</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
</dd>
</dl>
<h2>Clients</h2>
<h3>REST</h3>
<p>This module defines how to communicate to a proteus-server using the REST API.</p>
<dl>
<dt>Classes:</dt>
<dd>
<p>Client - provides methods to communicate to a proteus-server over REST</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.rest.Client</ac:parameter>
</ac:structured-macro>
<em>class </em><code>proteus.rest.</code><strong><code>Client</code></strong>(<em><em>address</em></em>, <em><em>headers</em>=None</em>)</dt>
<dd><p>The Client class provides methods to communicate to the proteus-server.</p>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.rest.Client.get_address</ac:parameter>
</ac:structured-macro>
<strong><code>get_address</code></strong>(<em><em>command</em></em>, <em>*<em>args</em></em>)</dt>
<dd><p>Get the HTTP address corresponding to a particular command. If the command takes arguments, pass them as well.</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>command</strong> (<em>str</em>) – Name of the command to get the endpoint of</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>HTTP address</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>str</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.rest.Client.get_endpoint</ac:parameter>
</ac:structured-macro>
<strong><code>get_endpoint</code></strong>(<em><em>command</em></em>, <em>*<em>args</em></em>)</dt>
<dd><p>Get the REST endpoint corresponding to a particular command. If the command takes arguments, pass them as well.</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>command</strong> (<em>str</em>) – Name of the command to get the endpoint of</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>REST endpoint</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>str</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.rest.Client.infer</ac:parameter>
</ac:structured-macro>
<strong><code>infer</code></strong>(<em><em>model</em></em>, <em><em>request</em></em>, <em><em>compress</em>=False</em>)</dt>
<dd><p>Make an inference request from a model</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>model</strong> (<em>str</em>) – Qualified name of the model to make a request to</p>
</li>
<li>
<p><strong>request</strong> (<em>Request</em><em>|</em><em>dict</em>) – Request to make</p>
</li>
<li>
<p><strong>compress</strong> (<em>bool</em><em>, </em><em>optional</em>) – Compress the request. Defaults to False.</p>
</li>
</ul>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>JsonResponse if success, ErrorResponse if failure</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>Response</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.rest.Client.infers</ac:parameter>
</ac:structured-macro>
<strong><code>infers</code></strong>(<em><em>models</em>: <em>list</em></em>, <em><em>requests</em></em>)</dt>
<dd><p>Make multiple inference requests to multiple models. This method launches multiple asynchronous requests simultaneously and blocks until all return. The number of models and requests should match.</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>models</strong> (<em>list</em>) – List containing qualified names of models to make inferences</p>
</li>
<li>
<p><strong>requests</strong> (<em>list</em>) – List containing Requests or dicts</p>
</li>
</ul>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>List containing responses for each request</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>list</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.rest.Client.load</ac:parameter>
</ac:structured-macro>
<strong><code>load</code></strong>(<em><em>model</em>: <em>str</em></em>, <em><em>parameters</em>=None</em>)</dt>
<dd><p>Load a model</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>model</strong> (<em>str</em>) – Name of the model to load</p>
</li>
<li>
<p><strong>parameters</strong> (<em>dict</em><em>, </em><em>optional</em>) – Load-time parameters to pass to Proteus. Defaults to None.</p>
</li>
</ul>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>Returns an HtmlResponse with the qualified name to make inference requests to</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>Response</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.rest.Client.model_ready</ac:parameter>
</ac:structured-macro>
<strong><code>model_ready</code></strong>(<em><em>model</em></em>)</dt>
<dd><p>Check if a particular model is ready</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>model</strong> (<em>str</em>) – Qualified name of the model to check</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>True if ready</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>bool</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.rest.Client.server_live</ac:parameter>
</ac:structured-macro>
<strong><code>server_live</code></strong>()</dt>
<dd><p>Check if the server is live</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>True if live</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>bool</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.rest.Client.unload</ac:parameter>
</ac:structured-macro>
<strong><code>unload</code></strong>(<em><em>model</em></em>)</dt>
<dd><p>Unload a model</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>model</strong> (<em>str</em>) – Qualified name of the model to unload</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>HtmlResponse if success, ErrorResponse if failure</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>Response</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.rest.Client.wait_until_live</ac:parameter>
</ac:structured-macro>
<strong><code>wait_until_live</code></strong>()</dt>
<dd><p>Block until the server is live</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.rest.Client.wait_until_stop</ac:parameter>
</ac:structured-macro>
<strong><code>wait_until_stop</code></strong>()</dt>
<dd><p>Block until the server is dead</p>
</dd>
</dl>
</dd>
</dl>
<h3>Websocket</h3>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus.websocket.WebsocketOpcodes</ac:parameter>
</ac:structured-macro>
<em>class </em><code>proteus.websocket.</code><strong><code>WebsocketOpcodes</code></strong>(<em><em>value</em></em>)</dt>
<dd><p>An enumeration.</p>
</dd>
</dl>
