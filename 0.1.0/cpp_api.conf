<h2>Native</h2>
<p>Implements the methods for interacting with Proteus in the native C++ API. </p>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv47proteus</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv37proteus</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv27proteus</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">namespaceproteus</ac:parameter>
</ac:structured-macro>
namespace <strong><code>proteus</code></strong></dt>
<dd><p style="font-weight: bold; margin-top: 30px">Functions</p>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv4N7proteus10initializeEv</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv3N7proteus10initializeEv</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv2N7proteus10initializeEv</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus::initialize</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">native_8cpp_1af1f39625420f5f44157057c4e5a5e44f</ac:parameter>
</ac:structured-macro>
void <strong><code>initialize</code></strong>()</dt>
<dd><p>Initialize proteus. </p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv4N7proteus9terminateEv</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv3N7proteus9terminateEv</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv2N7proteus9terminateEv</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus::terminate</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">native_8cpp_1a2a4ec889ed4ce046bb2151887bd4bd07</ac:parameter>
</ac:structured-macro>
void <strong><code>terminate</code></strong>()</dt>
<dd><p>Shut down proteus. </p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv4N7proteus15startHttpServerEi</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv3N7proteus15startHttpServerEi</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv2N7proteus15startHttpServerEi</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus::startHttpServer__i</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">native_8cpp_1a8ba9134588ff8f186e28c5999e3105fc</ac:parameter>
</ac:structured-macro>
void <strong><code>startHttpServer</code></strong>(int port)</dt>
<dd><p>Start the HTTP server for collecting metrics. This is a no-op if Proteus is compiled without HTTP support. </p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>port</strong> – port to use </p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv4N7proteus14stopHttpServerEv</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv3N7proteus14stopHttpServerEv</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv2N7proteus14stopHttpServerEv</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus::stopHttpServer</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">native_8cpp_1a25cebf38af94799a8f0f064b8fbc15b9</ac:parameter>
</ac:structured-macro>
void <strong><code>stopHttpServer</code></strong>()</dt>
<dd><p>Stop the HTTP server. This is a no-op if Proteus is compiled without HTTP support. </p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv4N7proteus4loadERKNSt6stringEP17RequestParameters</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv3N7proteus4loadERKNSt6stringEP17RequestParameters</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv2N7proteus4loadERKNSt6stringEP17RequestParameters</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus::load__ssCR.RequestParametersP</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">native_8cpp_1ae0df33338cf6855817c81a981d38cce9</ac:parameter>
</ac:structured-macro>
std::string <strong><code>load</code></strong>(const <em>std</em>::<em>string</em> &amp;worker, <em>RequestParameters</em> *parameters)</dt>
<dd><p>Load a worker. </p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>worker</strong> – name of the worker to load </p>
</li>
<li>
<p><strong>parameters</strong> – any load-time parameters to pass to the worker </p>
</li>
</ul>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>std::string the qualified name of the worker to make inference requests </p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv4N7proteus7enqueueERKNSt6stringE21InferenceRequestInput</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv3N7proteus7enqueueERKNSt6stringE21InferenceRequestInput</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv2N7proteus7enqueueERKNSt6stringE21InferenceRequestInput</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus::enqueue__ssCR.InferenceRequestInput</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">native_8cpp_1a66c6810c8be443777fe2255e0d6e94f5</ac:parameter>
</ac:structured-macro>
InferenceResponseFuture <strong><code>enqueue</code></strong>(const <em>std</em>::<em>string</em> &amp;workerName, <em>InferenceRequestInput</em> request)</dt>
<dd><p>Enqueue an inference request to Proteus. </p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>workerName</strong> – name of the worker to make the request to </p>
</li>
<li>
<p><strong>request</strong> – the request to make </p>
</li>
</ul>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>InferenceResponseFuture a future to get the results of the request </p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv4N7proteus11getHardwareEv</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv3N7proteus11getHardwareEv</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv2N7proteus11getHardwareEv</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus::getHardware</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">native_8cpp_1aebb19d97c428cde49bf14cee1abec5fa</ac:parameter>
</ac:structured-macro>
std::string <strong><code>getHardware</code></strong>()</dt>
<dd><p>Get a string that lists the available kernels (“&lt;name&gt;:i,&lt;name&gt;:j…”) </p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv4N7proteus11hasHardwareERKNSt6stringE6size_t</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv3N7proteus11hasHardwareERKNSt6stringE6size_t</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">_CPPv2N7proteus11hasHardwareERKNSt6stringE6size_t</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">proteus::hasHardware__ssCR.s</ac:parameter>
</ac:structured-macro>
<ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">native_8cpp_1a4178a5d7c0b529c6b1a3053662b4dbb1</ac:parameter>
</ac:structured-macro>
bool <strong><code>hasHardware</code></strong>(const <em>std</em>::<em>string</em> &amp;kernel, <em>size_t</em> num)</dt>
<dd><p>Check if a particular kernel exists on the server. The string splitting code is inspired from: <a href="https://stackoverflow.com/a/14266139">https://stackoverflow.com/a/14266139</a>. </p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>kernel</strong> – kernel name to check if it exists. An empty string is a special name that matches any kernel name. </p>
</li>
<li>
<p><strong>num</strong> – minimum number of the kernels that should be present </p>
</li>
</ul>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>bool </p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
</dd>
</dl>
