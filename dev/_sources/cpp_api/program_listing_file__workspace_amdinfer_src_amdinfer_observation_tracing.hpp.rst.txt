
.. _program_listing_file__workspace_amdinfer_src_amdinfer_observation_tracing.hpp:

Program Listing for File tracing.hpp
====================================

|exhale_lsh| :ref:`Return to documentation for file <file__workspace_amdinfer_src_amdinfer_observation_tracing.hpp>` (``/workspace/amdinfer/src/amdinfer/observation/tracing.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright 2021 Xilinx, Inc.
   // Copyright 2022 Advanced Micro Devices, Inc.
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //      http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #ifndef GUARD_AMDINFER_OBSERVATION_TRACING
   #define GUARD_AMDINFER_OBSERVATION_TRACING
   
   #include <memory>  // for shared_ptr, uniqu...
   #include <stack>   // for stack
   
   #include "amdinfer/build_options.hpp"    // for AMDINFER_ENABLE_TR...
   #include "amdinfer/core/parameters.hpp"  // for ParameterMap
   #include "amdinfer/declarations.hpp"     // for StringMap
   
   // IWYU pragma: no_forward_declare amdinfer::ParameterMap
   
   #ifdef AMDINFER_ENABLE_TRACING
   
   // opentelemetry needs this definition prior to any header inclusions if the
   // library was compiled with this flag set, which it is in the Docker build
   #define HAVE_CPP_STDLIB
   
   #include <opentelemetry/common/attribute_value.h>  // for AttributeValue
   #include <opentelemetry/nostd/shared_ptr.h>
   #include <opentelemetry/std/string_view.h>          // for string_view
   #include <opentelemetry/trace/span.h>               // for span
   #include <opentelemetry/trace/span_startoptions.h>  // for StartSpanOptions
   
   namespace amdinfer {
   
   void startTracer();
   void stopTracer();
   
   class Trace final {
    public:
     explicit Trace(
       const char* name,
       const opentelemetry::v1::trace::StartSpanOptions& options = {});
     ~Trace();
     Trace(Trace const&) = delete;              
     Trace& operator=(const Trace&) = delete;   
     Trace(Trace&& other) = delete;             
     Trace& operator=(Trace&& other) = delete;  
   
     void startSpan(const char* name);
   
     void setAttribute(opentelemetry::nostd::string_view key,
                       const opentelemetry::common::AttributeValue& value);
   
     void setAttributes(const ParameterMap& parameters);
   
     StringMap propagate();
   
     void endSpan();
   
     void endTrace();
   
    private:
     std::stack<opentelemetry::nostd::shared_ptr<opentelemetry::trace::Span>>
       spans_;
     // std::unique_ptr<opentelemetry::trace::Scope> scope_;
   };
   
   TracePtr startTrace(const char* name);
   
   TracePtr startTrace(const char* name, const StringMap& http_headers);
   
   }  // namespace amdinfer
   
   #endif
   
   #endif  // GUARD_AMDINFER_OBSERVATION_TRACING
