selector_to_html = {"a[href=\"#_CPPv4N8amdinfer12MemoryHeaderE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12MemoryHeaderE\">\n<span id=\"_CPPv3N8amdinfer12MemoryHeaderE\"></span><span id=\"_CPPv2N8amdinfer12MemoryHeaderE\"></span><span id=\"amdinfer::MemoryHeader\"></span><span class=\"target\" id=\"structamdinfer_1_1MemoryHeader\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MemoryHeader</span></span></span><br/></dt><dd></dd>", "a[href=\"#struct-documentation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Struct Documentation<a class=\"headerlink\" href=\"#struct-documentation\" title=\"Permalink to this heading\">\u00b6</a></h2>", "a[href=\"file__workspace_amdinfer_src_amdinfer_core_memory_pool_memory_allocator.hpp.html#file-workspace-amdinfer-src-amdinfer-core-memory-pool-memory-allocator-hpp\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">File memory_allocator.hpp<a class=\"headerlink\" href=\"#file-memory-allocator-hpp\" title=\"Permalink to this heading\">\u00b6</a></h1><p>\u21b0 <a class=\"reference internal\" href=\"dir__workspace_amdinfer_src_amdinfer_core_memory_pool.html#dir-workspace-amdinfer-src-amdinfer-core-memory-pool\"><span class=\"std std-ref\">Parent directory</span></a> (<code class=\"docutils literal notranslate\"><span class=\"pre\">/workspace/amdinfer/src/amdinfer/core/memory_pool</span></code>)</p>", "a[href=\"#struct-memoryheader\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Struct MemoryHeader<a class=\"headerlink\" href=\"#struct-memoryheader\" title=\"Permalink to this heading\">\u00b6</a></h1><h2>Struct Documentation<a class=\"headerlink\" href=\"#struct-documentation\" title=\"Permalink to this heading\">\u00b6</a></h2>", "a[href=\"#_CPPv4N8amdinfer12MemoryHeader4freeE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12MemoryHeader4freeE\">\n<span id=\"_CPPv3N8amdinfer12MemoryHeader4freeE\"></span><span id=\"_CPPv2N8amdinfer12MemoryHeader4freeE\"></span><span id=\"amdinfer::MemoryHeader::free__b\"></span><span class=\"target\" id=\"structamdinfer_1_1MemoryHeader_1a276a3ebe5fcf220ea96f14ee743d9af5\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">free</span></span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N8amdinfer12MemoryHeader4sizeE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12MemoryHeader4sizeE\">\n<span id=\"_CPPv3N8amdinfer12MemoryHeader4sizeE\"></span><span id=\"_CPPv2N8amdinfer12MemoryHeader4sizeE\"></span><span id=\"amdinfer::MemoryHeader::size__s\"></span><span class=\"target\" id=\"structamdinfer_1_1MemoryHeader_1a9c16f039d9bf376bf0e8b8d7035cdbc8\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">size</span></span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N8amdinfer12MemoryHeader7addressE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12MemoryHeader7addressE\">\n<span id=\"_CPPv3N8amdinfer12MemoryHeader7addressE\"></span><span id=\"_CPPv2N8amdinfer12MemoryHeader7addressE\"></span><span id=\"amdinfer::MemoryHeader::address__std::byteP\"></span><span class=\"target\" id=\"structamdinfer_1_1MemoryHeader_1a330b5cc996b82719600d7ac0c6e4ab2c\"></span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">byte</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">address</span></span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N8amdinfer12MemoryHeader8block_idE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12MemoryHeader8block_idE\">\n<span id=\"_CPPv3N8amdinfer12MemoryHeader8block_idE\"></span><span id=\"_CPPv2N8amdinfer12MemoryHeader8block_idE\"></span><span id=\"amdinfer::MemoryHeader::block_id__s\"></span><span class=\"target\" id=\"structamdinfer_1_1MemoryHeader_1ab4b7a6dd14a30857052ad15a12e4fa7c\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">block_id</span></span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N8amdinfer12MemoryHeader12MemoryHeaderEPNSt4byteE6size_tb6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12MemoryHeader12MemoryHeaderEPNSt4byteE6size_tb6size_t\">\n<span id=\"_CPPv3N8amdinfer12MemoryHeader12MemoryHeaderEPNSt4byteE6size_tb6size_t\"></span><span id=\"_CPPv2N8amdinfer12MemoryHeader12MemoryHeaderEPNSt4byteE6size_tb6size_t\"></span><span id=\"amdinfer::MemoryHeader::MemoryHeader__std::byteP.s.b.s\"></span><span class=\"target\" id=\"structamdinfer_1_1MemoryHeader_1a20ed06462b4d16583285cdcd1d879bab\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MemoryHeader</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">byte</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"n sig-param\"><span class=\"pre\">address</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">size</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">free</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">block_id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
