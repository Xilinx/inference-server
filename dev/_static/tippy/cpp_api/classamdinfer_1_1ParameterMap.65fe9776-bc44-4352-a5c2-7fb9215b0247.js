selector_to_html = {"a[href=\"#_CPPv4N8amdinfer12ParameterMap12ParameterMapERKNSt6vectorINSt6stringEEERKNSt6vectorI9ParameterEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12ParameterMap12ParameterMapERKNSt6vectorINSt6stringEEERKNSt6vectorI9ParameterEE\">\n<span id=\"_CPPv3N8amdinfer12ParameterMap12ParameterMapERKNSt6vectorINSt6stringEEERKNSt6vectorI9ParameterEE\"></span><span id=\"_CPPv2N8amdinfer12ParameterMap12ParameterMapERKNSt6vectorINSt6stringEEERKNSt6vectorI9ParameterEE\"></span><span id=\"amdinfer::ParameterMap::ParameterMap__std::vector:ss:CR.std::vector:Parameter:CR\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1ac57d41628c73d2c13a6e4cda5b8aa041\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ParameterMap</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">vector</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">keys</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">vector</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"typedef_parameters_8hpp_1af874429ad00786b2a05f30c311422e4c.html#_CPPv4N8amdinfer9ParameterE\" title=\"amdinfer::Parameter\"><span class=\"n\"><span class=\"pre\">Parameter</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">values</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Construct a new <a class=\"reference internal\" href=\"../cpp_user_api.html#classamdinfer_1_1ParameterMap\"><span class=\"std std-ref\">ParameterMap</span></a> object with initial values. The sizes of the keys and values vectors must match. </p><p>Until C++20, passing const char* to this constructor will convert it to a bool instead of a string. Explicitly convert any string literals to a string before passing them to this constructor.</p></dd>", "a[href=\"#_CPPv4N8amdinfer12ParameterMapE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12ParameterMapE\">\n<span id=\"_CPPv3N8amdinfer12ParameterMapE\"></span><span id=\"_CPPv2N8amdinfer12ParameterMapE\"></span><span id=\"amdinfer::ParameterMap\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ParameterMap</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../cpp_user_api.html#_CPPv48amdinfer\" title=\"amdinfer\"><span class=\"n\"><span class=\"pre\">amdinfer</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"classamdinfer_1_1Serializable.html#_CPPv4N8amdinfer12SerializableE\" title=\"amdinfer::Serializable\"><span class=\"n\"><span class=\"pre\">Serializable</span></span></a><br/></dt><dd><p>Holds any parameters from JSON (defined by KServe spec as one of bool, number or string). We further restrict numbers to be doubles or int32. </p></dd>", "a[href=\"classamdinfer_1_1Serializable.html#exhale-class-classamdinfer-1-1serializable\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Class Serializable<a class=\"headerlink\" href=\"#class-serializable\" title=\"Permalink to this heading\">\u00b6</a></h1><h2>Inheritance Relationships<a class=\"headerlink\" href=\"#inheritance-relationships\" title=\"Permalink to this heading\">\u00b6</a></h2><h3>Derived Types<a class=\"headerlink\" href=\"#derived-types\" title=\"Permalink to this heading\">\u00b6</a></h3>", "a[href=\"file__workspace_amdinfer_include_amdinfer_core_parameters.hpp.html#file-workspace-amdinfer-include-amdinfer-core-parameters-hpp\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">File parameters.hpp<a class=\"headerlink\" href=\"#file-parameters-hpp\" title=\"Permalink to this heading\">\u00b6</a></h1><p>\u21b0 <a class=\"reference internal\" href=\"dir__workspace_amdinfer_include_amdinfer_core.html#dir-workspace-amdinfer-include-amdinfer-core\"><span class=\"std std-ref\">Parent directory</span></a> (<code class=\"docutils literal notranslate\"><span class=\"pre\">/workspace/amdinfer/include/amdinfer/core</span></code>)</p><p>Defines the Parameter object and associated containers.</p>", "a[href=\"#_CPPv4N8amdinfer12ParameterMap3endEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12ParameterMap3endEv\">\n<span id=\"_CPPv3N8amdinfer12ParameterMap3endEv\"></span><span id=\"_CPPv2N8amdinfer12ParameterMap3endEv\"></span><span id=\"amdinfer::ParameterMap::end\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1a5c72a9c3978274fb947569d4edbb0801\"></span><span class=\"n\"><span class=\"pre\">Iterator</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">end</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Returns a read/write iterator to one past the last parameter in the object. </p></dd>", "a[href=\"#_CPPv4I0ENK8amdinfer12ParameterMap3getE1TRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0ENK8amdinfer12ParameterMap3getE1TRKNSt6stringE\">\n<span id=\"_CPPv3I0ENK8amdinfer12ParameterMap3getERKNSt6stringE\"></span><span id=\"_CPPv2I0ENK8amdinfer12ParameterMap3getERKNSt6stringE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1aa1a274a34a5577e1b177fec351069928\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0ENK8amdinfer12ParameterMap3getE1TRKNSt6stringE\" title=\"amdinfer::ParameterMap::get::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">get</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">key</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get the named parameter. </p></dd>", "a[href=\"#_CPPv4NK8amdinfer12ParameterMap6cbeginEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK8amdinfer12ParameterMap6cbeginEv\">\n<span id=\"_CPPv3NK8amdinfer12ParameterMap6cbeginEv\"></span><span id=\"_CPPv2NK8amdinfer12ParameterMap6cbeginEv\"></span><span id=\"amdinfer::ParameterMap::cbeginC\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1acc06ca43dca774b928dd76e002133d09\"></span><span class=\"n\"><span class=\"pre\">ConstIterator</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">cbegin</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Returns a read iterator to the first parameter in the object. </p></dd>", "a[href=\"#_CPPv4N8amdinfer12ParameterMap11deserializeEPKNSt4byteE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12ParameterMap11deserializeEPKNSt4byteE\">\n<span id=\"_CPPv3N8amdinfer12ParameterMap11deserializeEPKNSt4byteE\"></span><span id=\"_CPPv2N8amdinfer12ParameterMap11deserializeEPKNSt4byteE\"></span><span id=\"amdinfer::ParameterMap::deserialize__std::byteCP\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1ae55e1062e30d7f5ff6825cf950bb72a0\"></span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">byte</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">deserialize</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">byte</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"n sig-param\"><span class=\"pre\">data_in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd><p>Deserializes the data at the provided memory address to initialize this object. If the memory cannot be deserialized, an exception is thrown. </p></dd>", "a[href=\"#base-type\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Base Type<a class=\"headerlink\" href=\"#base-type\" title=\"Permalink to this heading\">\u00b6</a></h3>", "a[href=\"#_CPPv4NK8amdinfer12ParameterMap4sizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK8amdinfer12ParameterMap4sizeEv\">\n<span id=\"_CPPv3NK8amdinfer12ParameterMap4sizeEv\"></span><span id=\"_CPPv2NK8amdinfer12ParameterMap4sizeEv\"></span><span id=\"amdinfer::ParameterMap::sizeC\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1ad1163e57ad5aa352a06c2ddef8d94fc8\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">size</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Gets the number of parameters. </p></dd>", "a[href=\"#_CPPv4NK8amdinfer12ParameterMap3endEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK8amdinfer12ParameterMap3endEv\">\n<span id=\"_CPPv3NK8amdinfer12ParameterMap3endEv\"></span><span id=\"_CPPv2NK8amdinfer12ParameterMap3endEv\"></span><span id=\"amdinfer::ParameterMap::endC\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1a86fefd0bd832b8a6288802d7e1dff3ea\"></span><span class=\"n\"><span class=\"pre\">ConstIterator</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">end</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Returns a read iterator to one past the last parameter in the object. </p></dd>", "a[href=\"#_CPPv4NK8amdinfer12ParameterMap5emptyEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK8amdinfer12ParameterMap5emptyEv\">\n<span id=\"_CPPv3NK8amdinfer12ParameterMap5emptyEv\"></span><span id=\"_CPPv2NK8amdinfer12ParameterMap5emptyEv\"></span><span id=\"amdinfer::ParameterMap::emptyC\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1ae30ff60246c43acb5d5c49dd4d3a07d3\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">empty</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Checks if the parameters are empty. </p></dd>", "a[href=\"#_CPPv4N8amdinfer12ParameterMap12ParameterMapEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12ParameterMap12ParameterMapEv\">\n<span id=\"_CPPv3N8amdinfer12ParameterMap12ParameterMapEv\"></span><span id=\"_CPPv2N8amdinfer12ParameterMap12ParameterMapEv\"></span><span id=\"amdinfer::ParameterMap::ParameterMap\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1ad26db2f95e45a9b2393735fe59dc69f1\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ParameterMap</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK8amdinfer12ParameterMap4cendEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK8amdinfer12ParameterMap4cendEv\">\n<span id=\"_CPPv3NK8amdinfer12ParameterMap4cendEv\"></span><span id=\"_CPPv2NK8amdinfer12ParameterMap4cendEv\"></span><span id=\"amdinfer::ParameterMap::cendC\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1a2368abecba7b6b1521a54f3982d1e044\"></span><span class=\"n\"><span class=\"pre\">ConstIterator</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">cend</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Returns a read iterator to one past the last parameter in the object. </p></dd>", "a[href=\"#_CPPv4N8amdinfer12ParameterMap3putERKNSt6stringE9Parameter\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12ParameterMap3putERKNSt6stringE9Parameter\">\n<span id=\"_CPPv3N8amdinfer12ParameterMap3putERKNSt6stringE9Parameter\"></span><span id=\"_CPPv2N8amdinfer12ParameterMap3putERKNSt6stringE9Parameter\"></span><span id=\"amdinfer::ParameterMap::put__ssCR.Parameter\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1ae53207903386386c5bd55e7ad330163c\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">put</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">key</span></span>, <a class=\"reference internal\" href=\"typedef_parameters_8hpp_1af874429ad00786b2a05f30c311422e4c.html#_CPPv4N8amdinfer9ParameterE\" title=\"amdinfer::Parameter\"><span class=\"n\"><span class=\"pre\">Parameter</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Put in a key-value pair. </p></dd>", "a[href=\"#_CPPv4N8amdinfer12ParameterMap6renameERKNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12ParameterMap6renameERKNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv3N8amdinfer12ParameterMap6renameERKNSt6stringERKNSt6stringE\"></span><span id=\"_CPPv2N8amdinfer12ParameterMap6renameERKNSt6stringERKNSt6stringE\"></span><span id=\"amdinfer::ParameterMap::rename__ssCR.ssCR\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1ae5ba4557e009b691949f63ba6fe0e9cf\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">rename</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">key</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">new_key</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Rename the key associated with a parameter. If the new key already exists, its value is not overwritten and the old key is just erased. </p></dd>", "a[href=\"#_CPPv4NK8amdinfer12ParameterMap9serializeEPNSt4byteE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK8amdinfer12ParameterMap9serializeEPNSt4byteE\">\n<span id=\"_CPPv3NK8amdinfer12ParameterMap9serializeEPNSt4byteE\"></span><span id=\"_CPPv2NK8amdinfer12ParameterMap9serializeEPNSt4byteE\"></span><span id=\"amdinfer::ParameterMap::serialize__std::bytePC\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1a097e7dc1088827ec5d1509d7b1e72a51\"></span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">byte</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">serialize</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">byte</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"n sig-param\"><span class=\"pre\">data_out</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd><p>Serializes the object to the provided memory address. There should be sufficient space to store the serialized object. </p></dd>", "a[href=\"#_CPPv4NK8amdinfer12ParameterMap4dataEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK8amdinfer12ParameterMap4dataEv\">\n<span id=\"_CPPv3NK8amdinfer12ParameterMap4dataEv\"></span><span id=\"_CPPv2NK8amdinfer12ParameterMap4dataEv\"></span><span id=\"amdinfer::ParameterMap::dataC\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1aef225e7df995a73a96cc067a8df85fa1\"></span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">map</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"typedef_parameters_8hpp_1af874429ad00786b2a05f30c311422e4c.html#_CPPv4N8amdinfer9ParameterE\" title=\"amdinfer::Parameter\"><span class=\"n\"><span class=\"pre\">Parameter</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">less</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">data</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Gets the underlying data structure holding the parameters. </p></dd>", "a[href=\"#inheritance-relationships\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Inheritance Relationships<a class=\"headerlink\" href=\"#inheritance-relationships\" title=\"Permalink to this heading\">\u00b6</a></h2><h3>Base Type<a class=\"headerlink\" href=\"#base-type\" title=\"Permalink to this heading\">\u00b6</a></h3>", "a[href=\"#_CPPv4N8amdinfer12ParameterMap3putERKNSt6stringEPKc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12ParameterMap3putERKNSt6stringEPKc\">\n<span id=\"_CPPv3N8amdinfer12ParameterMap3putERKNSt6stringEPKc\"></span><span id=\"_CPPv2N8amdinfer12ParameterMap3putERKNSt6stringEPKc\"></span><span id=\"amdinfer::ParameterMap::put__ssCR.cCP\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1a4f2e929c798871b992f9e0d14a85559f\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">put</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">key</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Put in a key-value pair. </p><p>This overload is needed because C++ converts const char* to bool instead of string when both types are present in the variant. This behavior has been fixed in C++20.</p></dd>", "a[href=\"typedef_parameters_8hpp_1af874429ad00786b2a05f30c311422e4c.html#_CPPv4N8amdinfer9ParameterE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer9ParameterE\">\n<span id=\"_CPPv3N8amdinfer9ParameterE\"></span><span id=\"_CPPv2N8amdinfer9ParameterE\"></span><span class=\"target\" id=\"parameters_8hpp_1af874429ad00786b2a05f30c311422e4c\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-prename descclassname\"><a class=\"reference internal\" href=\"../cpp_user_api.html#_CPPv48amdinfer\" title=\"amdinfer\"><span class=\"n\"><span class=\"pre\">amdinfer</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Parameter</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">variant</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">int32_t</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd><p>parameters may be one of these types </p></dd>", "a[href=\"#_CPPv4NK8amdinfer12ParameterMap13serializeSizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK8amdinfer12ParameterMap13serializeSizeEv\">\n<span id=\"_CPPv3NK8amdinfer12ParameterMap13serializeSizeEv\"></span><span id=\"_CPPv2NK8amdinfer12ParameterMap13serializeSizeEv\"></span><span id=\"amdinfer::ParameterMap::serializeSizeC\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1aab10177f937ee191abcd13e48fc596dc\"></span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">serializeSize</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd><p>Returns the size of the serialized data. </p></dd>", "a[href=\"#class-documentation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Class Documentation<a class=\"headerlink\" href=\"#class-documentation\" title=\"Permalink to this heading\">\u00b6</a></h2>", "a[href=\"#class-parametermap\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Class ParameterMap<a class=\"headerlink\" href=\"#class-parametermap\" title=\"Permalink to this heading\">\u00b6</a></h1><h2>Inheritance Relationships<a class=\"headerlink\" href=\"#inheritance-relationships\" title=\"Permalink to this heading\">\u00b6</a></h2><h3>Base Type<a class=\"headerlink\" href=\"#base-type\" title=\"Permalink to this heading\">\u00b6</a></h3>", "a[href=\"#_CPPv4N8amdinfer12ParameterMap5beginEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12ParameterMap5beginEv\">\n<span id=\"_CPPv3N8amdinfer12ParameterMap5beginEv\"></span><span id=\"_CPPv2N8amdinfer12ParameterMap5beginEv\"></span><span id=\"amdinfer::ParameterMap::begin\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1acfb6561ba8fc7dbe6063a4a73b9e093d\"></span><span class=\"n\"><span class=\"pre\">Iterator</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">begin</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Returns a read/write iterator to the first parameter in the object. </p></dd>", "a[href=\"#_CPPv4N8amdinfer12ParameterMap5eraseERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12ParameterMap5eraseERKNSt6stringE\">\n<span id=\"_CPPv3N8amdinfer12ParameterMap5eraseERKNSt6stringE\"></span><span id=\"_CPPv2N8amdinfer12ParameterMap5eraseERKNSt6stringE\"></span><span id=\"amdinfer::ParameterMap::erase__ssCR\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1a7f1bf3d5475f28df590cfcf14613447d\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">erase</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">key</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Removes a parameter, if it exists. No error is raised if it doesn\u2019t exist. </p></dd>", "a[href=\"#_CPPv4NK8amdinfer12ParameterMap3hasERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK8amdinfer12ParameterMap3hasERKNSt6stringE\">\n<span id=\"_CPPv3NK8amdinfer12ParameterMap3hasERKNSt6stringE\"></span><span id=\"_CPPv2NK8amdinfer12ParameterMap3hasERKNSt6stringE\"></span><span id=\"amdinfer::ParameterMap::has__ssCRC\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1a66a266c5d144a28d99af408ab8d7cd3c\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">has</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">key</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Checks if a particular parameter exists. </p></dd>", "a[href=\"classamdinfer_1_1Serializable.html#_CPPv4N8amdinfer12SerializableE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12SerializableE\">\n<span id=\"_CPPv3N8amdinfer12SerializableE\"></span><span id=\"_CPPv2N8amdinfer12SerializableE\"></span><span id=\"amdinfer::Serializable\"></span><span class=\"target\" id=\"classamdinfer_1_1Serializable\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Serializable</span></span></span><br/></dt><dd><p>This class can be inherited from to implement serialization and deserialization in a class. </p><p>Subclassed by <a class=\"reference internal\" href=\"../cpp_user_api.html#classamdinfer_1_1ParameterMap\"><span class=\"std std-ref\">amdinfer::ParameterMap</span></a>, <a class=\"reference internal\" href=\"classamdinfer_1_1Tensor.html#classamdinfer_1_1Tensor\"><span class=\"std std-ref\">amdinfer::Tensor</span></a></p></dd>", "a[href=\"#_CPPv4N8amdinfer12ParameterMaplsERNSt7ostreamERK12ParameterMap\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8amdinfer12ParameterMaplsERNSt7ostreamERK12ParameterMap\">\n<span id=\"_CPPv3N8amdinfer12ParameterMaplsERNSt7ostreamERK12ParameterMap\"></span><span id=\"_CPPv2N8amdinfer12ParameterMaplsERNSt7ostreamERK12ParameterMap\"></span><span id=\"amdinfer::ParameterMap::lshift-operator__osR.ParameterMapCR\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1a9e7b8cecfc2e4ca534608e2d4d5cf86f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">friend</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;&lt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">os</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N8amdinfer12ParameterMapE\" title=\"amdinfer::ParameterMap\"><span class=\"n\"><span class=\"pre\">ParameterMap</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">self</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Provides an implementation to print the class with std::cout to an ostream. </p></dd>", "a[href=\"#_CPPv4NK8amdinfer12ParameterMap5beginEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK8amdinfer12ParameterMap5beginEv\">\n<span id=\"_CPPv3NK8amdinfer12ParameterMap5beginEv\"></span><span id=\"_CPPv2NK8amdinfer12ParameterMap5beginEv\"></span><span id=\"amdinfer::ParameterMap::beginC\"></span><span class=\"target\" id=\"classamdinfer_1_1ParameterMap_1a57d53e4505b6386845460147f8dfcccb\"></span><span class=\"n\"><span class=\"pre\">ConstIterator</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">begin</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Returns a read iterator to the first parameter in the object. </p></dd>", "a[href=\"../cpp_user_api.html#_CPPv48amdinfer\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48amdinfer\">\n<span id=\"_CPPv38amdinfer\"></span><span id=\"_CPPv28amdinfer\"></span><span id=\"amdinfer\"></span><span class=\"target\" id=\"namespaceamdinfer\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">amdinfer</span></span></span><br/></dt><dd></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
